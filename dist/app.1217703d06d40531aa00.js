(()=>{"use strict";var t={983:(t,e,i)=>{i.r(e)},49:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t){this.name=t,this.callbacks=[]}registerCallback(t){this.callbacks.push(t)}}e.default=class{constructor(){this.events={}}registerEvent(t){const e=new i(t);this.events[t]=e}dispatchEvent(t,e){this.events[t].callbacks.forEach((t=>{t(e)}))}addEventListener(t,e){this.events[t].registerCallback(e)}}},889:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(49));class r extends n.default{constructor(t){super(),this.state={min:0,max:100,from:0,to:100,step:1,tip:!0,range:!0,progress:!0,scale:!0,scaleDestiny:1,horizontal:!1},this.init(t)}setState(t){const[e,i]=this.splitParams(t);this.state=Object.assign(Object.assign({},this.state),i),this.state=Object.assign(Object.assign({},this.state),this.rangeFromToValidator(this.stepValidator(e))),this.dispatchEvent("ModelEvent",this.state)}getState(){return this.state}init(t){this.registerEvent("ModelEvent"),this.setState(t)}splitParams(t){const e={},i={};return"from"in t&&(e.from=t.from),"to"in t&&(e.to=t.to),"step"in t&&(i.step=t.step),"min"in t&&(i.min=t.min),"max"in t&&(i.max=t.max),"scaleDestiny"in t&&(i.scaleDestiny=t.scaleDestiny),"scale"in t&&(i.scale=t.scale),"range"in t&&(i.range=t.range),"tip"in t&&(i.tip=t.tip),"horizontal"in t&&(i.horizontal=t.horizontal),"progress"in t&&(i.progress=t.progress),[e,i]}stepValidator(t){const e=Object.assign({},t);function i(t,e){return+(Math.round(t/e)*e).toFixed(2)}return e.from&&(e.from=i(e.from,this.state.step),e.from<=this.state.min?e.from=this.state.min:e.from>=this.state.max&&(e.from=this.state.max)),e.to&&(e.to=i(e.to,this.state.step),e.to<=this.state.min?e.to=this.state.min:e.to>=this.state.max&&(e.to=this.state.max)),e}rangeFromToValidator(t){if(!this.state.range)return t;const e=Object.assign({},t),i=e.from&&this.state.to-e.from<=0,s=e.to&&e.to-this.state.from<=0;return i&&(e.from=this.state.to),s&&(e.to=this.state.from),e}}e.default=r},731:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(49)),o=s(i(889)),a=s(i(498));class l extends r.default{constructor(t,e){super(),this.view=new a.default(t),this.model=new o.default(e),this.init()}init(){this.view.setState(this.model.getState()),this.bindEventListeners()}bindEventListeners(){this.viewEventHandler=this.viewEventHandler.bind(this),this.modelEventHandler=this.modelEventHandler.bind(this),this.view.addEventListener("ViewEvent",this.viewEventHandler),this.model.addEventListener("ModelEvent",this.modelEventHandler)}viewEventHandler(t){const{min:e,max:i}=this.model.getState();"number"==typeof e&&"number"==typeof i&&(t.from&&(t.from=+(0,n.convertPercentInValue)(e,i,t.from).toFixed(3)),t.to&&(t.to=+(0,n.convertPercentInValue)(e,i,t.to).toFixed(3))),this.model.setState(t)}modelEventHandler(t){this.view.setState(t)}}e.default=l},254:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.init()}setState(t){const{min:e,max:i,from:s,horizontal:n}=t;this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,from:s,horizontal:n}),this.update()}getPosition(){return this.state.horizontal?this.subView.getBoundingClientRect().top-this.slider.getBoundingClientRect().top+this.subView.offsetHeight/2:this.subView.getBoundingClientRect().left-this.slider.getBoundingClientRect().left+this.subView.offsetWidth/2}init(){this.createSubView(),this.registerEvent("SubViewEvent"),this.bindEventListener()}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__handle"),this.slider.appendChild(this.subView)}bindEventListener(){this.pointerStart=this.pointerStart.bind(this),this.subView.addEventListener("pointerdown",this.pointerStart)}pointerStart(){this.pointerHandler=this.pointerHandler.bind(this),window.addEventListener("pointermove",this.pointerHandler),window.addEventListener("pointerup",(()=>{window.removeEventListener("pointermove",this.pointerHandler),window.removeEventListener("pointermove",this.pointerHandler)}))}pointerHandler(t){this.dispatchEvent("SubViewEvent",{target:"handle",position:this.state.horizontal?t.clientY-this.slider.getBoundingClientRect().top:t.clientX-this.slider.getBoundingClientRect().left})}update(){const{min:t,max:e,from:i,horizontal:s}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i){if(s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},712:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(254));class o extends r.default{setState(t){const{min:e,max:i,to:s,horizontal:n}=t;this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,to:s,horizontal:n}),this.update()}pointerHandler(t){this.dispatchEvent("SubViewEvent",{target:"secondHandle",position:this.state.horizontal?t.clientY-this.slider.getBoundingClientRect().top:t.clientX-this.slider.getBoundingClientRect().left})}update(){const{min:t,max:e,to:i,horizontal:s}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i){if(s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},25:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.init()}setState(t){const{min:e,max:i,step:s,horizontal:n,scaleDestiny:r}=t,o=JSON.stringify(this.state);this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,step:s,horizontal:n,scaleDestiny:r}),o!==JSON.stringify(this.state)&&this.update()}init(){this.createSubView(),this.registerEvent("SubViewEvent")}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__scale"),this.slider.appendChild(this.subView)}update(){const{min:t,max:e,step:i,horizontal:s,scaleDestiny:n}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof n&&"number"==typeof i&&"boolean"==typeof s){let i=this.createPipFragment(t,e,t);for(let s=t+1;s<e;s+=1)s%n==0&&(i+=this.createPipFragment(t,e,s));i+=this.createPipFragment(t,e,e),this.subView.innerHTML=i,this.bindEventListener()}}createPipFragment(t,e,i){return this.state.horizontal?`\n      <div class="jq-slider__scale-pip" style="top:${(0,n.convertPercentInValue)(0,this.slider.clientHeight,(0,n.convertValueInPercent)(t,e,i))}px">\n        <div class="jq-slider__scale-label">${i}</div>\n      </div>`:`\n      <div class="jq-slider__scale-pip" style="left:${(0,n.convertValueInPercent)(t,e,i)}%">\n        <div class="jq-slider__scale-label">${i}</div>\n      </div>`}bindEventListener(){this.clickHandler=this.clickHandler.bind(this),this.subView.querySelectorAll(".jq-slider__scale-label").forEach((t=>{t instanceof HTMLElement&&t.addEventListener("click",this.clickHandler)}))}clickHandler(t){if(t.target instanceof HTMLElement){const{min:e,max:i}=this.state,s=this.state.horizontal?this.slider.clientHeight/100*(0,n.convertValueInPercent)(e,i,+t.target.innerHTML):this.slider.clientWidth/100*(0,n.convertValueInPercent)(e,i,+t.target.innerHTML);this.dispatchEvent("SubViewEvent",{target:"track",position:s})}}}e.default=o},573:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(841));class o extends r.default{setState(t){const{min:e=this.state.min,max:i=this.state.max,to:s=this.state.to,horizontal:n=this.state.horizontal}=t;this.state={min:e,max:i,to:s,horizontal:n},this.update()}update(){const{min:t,max:e,to:i,horizontal:s}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i){if(this.isDouble?this.subView.style.opacity="0":this.subView.style.opacity="1",this.subView.textContent=i.toString(),s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},841:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.isDouble=!1,this.init()}setState(t){const{min:e,max:i,from:s,to:n,horizontal:r}=t;this.state={min:e,max:i,from:s,to:n,horizontal:r},this.update()}changeIsDouble(t){this.isDouble=t}init(){this.createSubView()}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__tip"),this.slider.appendChild(this.subView)}update(){const{min:t,max:e,from:i,horizontal:s,to:r}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i&&"number"==typeof i){if(this.subView.textContent=this.isDouble?`${i} - ${r}`:i.toString(),s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},764:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.init()}setState(t){const{min:e,max:i,from:s,to:n,horizontal:r,range:o,progress:a}=t;this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,from:s,to:n,horizontal:r,range:o,progress:a}),this.update()}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__track"),this.progress=document.createElement("div"),this.progress.classList.add("jq-slider__progress"),this.subView.appendChild(this.progress),this.slider.appendChild(this.subView)}init(){this.createSubView(),this.registerEvent("SubViewEvent"),this.bindEventListener()}bindEventListener(){this.clickHandler=this.clickHandler.bind(this),this.subView.addEventListener("click",this.clickHandler)}clickHandler(t){this.dispatchEvent("SubViewEvent",{target:"track",position:this.state.horizontal?t.clientY-this.slider.getBoundingClientRect().top:t.clientX-this.slider.getBoundingClientRect().left})}update(){const{min:t,max:e,from:i,to:s,horizontal:r,range:o,progress:a}=this.state;if(a){if("number"==typeof t&&"number"==typeof e&&"number"==typeof i&&"number"==typeof s){const a=(0,n.convertValueInPercent)(t,e,i),l=(0,n.convertValueInPercent)(t,e,s);if(r){if(o){const t=l-a;this.progress.style.height=`${t}%`,this.progress.style.marginTop=this.slider.clientHeight/100*a+"px"}else this.progress.style.height=`${a}%`;return}if(o){const t=l-a;this.progress.style.width=`${t}%`,this.progress.style.marginLeft=`${a}%`}else this.progress.style.width=`${a}%`}}else this.progress.remove()}}e.default=o},498:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(254)),r=s(i(49)),o=s(i(712)),a=s(i(841)),l=s(i(573)),h=s(i(764)),c=i(952),d=s(i(25));class u extends r.default{constructor(t){super(),this.nodeElem=t,this.components=[],this.state={},this.init()}setState(t){this.checkSettings(t),this.state=Object.assign(Object.assign({},this.state),t),this.update(this.state),this.checkTips()}init(){this.createSlider(),this.registerEvent("ViewEvent")}createSlider(){this.slider=document.createElement("div"),this.slider.classList.add("jq-slider"),this.nodeElem.appendChild(this.slider)}createComponents(t){const{range:e,tip:i,scale:s,horizontal:r}=t;r&&this.slider.classList.add("jq-slider--horizontal"),this.components.push(new n.default(this.slider)),this.components.push(new h.default(this.slider)),i&&this.components.push(new a.default(this.slider)),e&&(this.components.push(new o.default(this.slider)),i&&this.components.push(new l.default(this.slider))),s&&this.components.push(new d.default(this.slider))}bindEventListener(){this.subViewEventHandler=this.subViewEventHandler.bind(this),this.components.forEach((t=>{t.events.SubViewEvent&&t.addEventListener("SubViewEvent",this.subViewEventHandler)}))}subViewEventHandler(t){const e=this.state.horizontal?this.slider.clientHeight:this.slider.clientWidth;if("handle"===t.target){const i=(0,c.convertPixelInPercent)(e,t.position);this.dispatchEvent("ViewEvent",{from:i})}if("secondHandle"===t.target){const i=(0,c.convertPixelInPercent)(e,t.position);this.dispatchEvent("ViewEvent",{to:i})}if("track"===t.target||"scale"===t.target){const i=this.getArrOfConcreteSubView(n.default),s=i[0].getPosition();if(this.state.range){const n=i[1].getPosition();return Math.abs(s-t.position)<n-t.position?void this.dispatchEvent("ViewEvent",{from:(0,c.convertPixelInPercent)(e,t.position)}):void this.dispatchEvent("ViewEvent",{to:(0,c.convertPixelInPercent)(e,t.position)})}this.dispatchEvent("ViewEvent",{from:(0,c.convertPixelInPercent)(e,t.position)})}}checkSettings(t){const{range:e,tip:i,scale:s,horizontal:n,progress:r,scaleDestiny:o}=t;(e!==this.state.range||i!==this.state.tip||s!==this.state.scale||n!==this.state.horizontal||r!==this.state.progress||o!==this.state.scaleDestiny)&&(this.components=[],this.slider.innerHTML="",this.createComponents(t),this.bindEventListener())}checkTips(){const{tip:t,range:e,horizontal:i}=this.state;if(t&&e){const t=this.getArrOfConcreteSubView(a.default),e=i?t[1].subView.clientHeight:t[1].subView.offsetWidth;t[0].getPosition()>t[1].getPosition()-e?t.forEach((t=>{t.changeIsDouble(!0),t.setState(this.state)})):t.forEach((t=>{t.changeIsDouble(!1)}))}}update(t){this.components.forEach((e=>e.setState(t)))}getArrOfConcreteSubView(t){return this.components.filter((e=>{var i;return null!==(i=e instanceof t)&&void 0!==i?i:e}))}}e.default=u},461:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(49));class r extends n.default{constructor(t){super(),this.slider=t,this.state={}}getPosition(){return this.state.horizontal?this.subView.getBoundingClientRect().top:this.subView.getBoundingClientRect().left}}e.default=r},174:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(983);const n=s(i(731));!function(t){const e={init(e){if("object"==typeof e)return this.each((function(){t(this).data("jqSlider")||(t(this).data().jqSlider=new n.default(this,e))}))},update(e){t(this).data("jqSlider").update({type:"updatePlugin",payload:e})},onChange(e){t(this).data("jqSlider").addEventListener("onChange",(t=>e(t)))}};t.fn.jqSlider=function(...t){const i=0===t.length||"object"==typeof t[0],s=t.length>=2&&"update"===t[0],n=t.length>=2&&"onChange"===t[0];if(i){const i=t[0]?t[0]:{};return e.init.call(this,i)}if(s&&"object"==typeof t[1]){const i=t[1];return e.update.call(this,i)}if(n&&"function"==typeof t[1]){const i=t[1];return e.onChange.call(this,(t=>i))}}}(jQuery)},952:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.convertPercentInValue=e.convertPixelInPercent=e.convertValueInPercent=void 0,e.convertValueInPercent=function(t,e,i){return 100/(e-t)*(i-t)},e.convertPixelInPercent=function(t,e){return 100/t*e},e.convertPercentInValue=function(t,e,i){return(e-t)/100*i+t}}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,i),r.exports}i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(174)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T1YsT0FIQStLLEVBQW9CSixHQUFVTCxLQUFLUSxFQUFPOUssUUFBUzhLLEVBQVFBLEVBQU85SyxRQUFTMEssR0FHcEVJLEVBQU85SyxRQ3BCZjBLLEVBQW9CTSxFQUFLaEwsSUFDSCxvQkFBWGlMLFFBQTBCQSxPQUFPQyxhQUMxQ3BMLE9BQU9DLGVBQWVDLEVBQVNpTCxPQUFPQyxZQUFhLENBQUVqTCxNQUFPLFdBRTdESCxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxLQ0Y3QnlLLEVBQW9CLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9BcHBDb21wb25lbnRzL0V2ZW50Q3JlYXRvci9FdmVudENyZWF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vQXBwQ29tcG9uZW50cy9Nb2RlbC9Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9BcHBDb21wb25lbnRzL1ByZXNlbnRlci9QcmVzZW50ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vQXBwQ29tcG9uZW50cy9WaWV3L1N1YlZpZXdDb21wb25lbnRzL0hhbmRsZS9IYW5kbGUudHMiLCJ3ZWJwYWNrOi8vLy4vQXBwQ29tcG9uZW50cy9WaWV3L1N1YlZpZXdDb21wb25lbnRzL0hhbmRsZS9TZWNvbmRIYW5kbGUudHMiLCJ3ZWJwYWNrOi8vLy4vQXBwQ29tcG9uZW50cy9WaWV3L1N1YlZpZXdDb21wb25lbnRzL1NjYWxlL1NjYWxlLnRzIiwid2VicGFjazovLy8uL0FwcENvbXBvbmVudHMvVmlldy9TdWJWaWV3Q29tcG9uZW50cy9UaXAvU2Vjb25kVGlwLnRzIiwid2VicGFjazovLy8uL0FwcENvbXBvbmVudHMvVmlldy9TdWJWaWV3Q29tcG9uZW50cy9UaXAvVGlwLnRzIiwid2VicGFjazovLy8uL0FwcENvbXBvbmVudHMvVmlldy9TdWJWaWV3Q29tcG9uZW50cy9UcmFjay9UcmFjay50cyIsIndlYnBhY2s6Ly8vLi9BcHBDb21wb25lbnRzL1ZpZXcvVmlldy50cyIsIndlYnBhY2s6Ly8vLi9BcHBDb21wb25lbnRzL1ZpZXcvYWJzdHJhY3RTdWJWaWV3L2Fic3RyYWN0U3ViVmlldy50cyIsIndlYnBhY2s6Ly8vLi9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vdXRpbHMvY2FsY1V0aWxzLnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgbWF4LWNsYXNzZXMtcGVyLWZpbGUgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtY2xhc3Nlcy1wZXItZmlsZVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgTXlFdmVudCB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgIH1cbiAgICByZWdpc3RlckNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbn1cbmNsYXNzIEV2ZW50Q3JlYXRvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XG4gICAgfVxuICAgIHJlZ2lzdGVyRXZlbnQoZXZlbnROYW1lKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IE15RXZlbnQoZXZlbnROYW1lKTtcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IGV2ZW50O1xuICAgIH1cbiAgICBkaXNwYXRjaEV2ZW50KGV2ZW50TmFtZSwgZXZlbnRBcmdzKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0uY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayhldmVudEFyZ3MpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0ucmVnaXN0ZXJDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRDcmVhdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBFdmVudENyZWF0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vRXZlbnRDcmVhdG9yL0V2ZW50Q3JlYXRvclwiKSk7XG5jbGFzcyBNb2RlbCBleHRlbmRzIEV2ZW50Q3JlYXRvcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBtYXg6IDEwMCxcbiAgICAgICAgICAgIGZyb206IDAsXG4gICAgICAgICAgICB0bzogMTAwLFxuICAgICAgICAgICAgc3RlcDogMSxcbiAgICAgICAgICAgIHRpcDogdHJ1ZSxcbiAgICAgICAgICAgIHJhbmdlOiB0cnVlLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgICBzY2FsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNjYWxlRGVzdGlueTogMSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmluaXQoc3RhdGUpO1xuICAgIH1cbiAgICBzZXRTdGF0ZShzdGF0ZSkge1xuICAgICAgICBjb25zdCBbdmFsdWVzLCBzZXR0aW5nc10gPSB0aGlzLnNwbGl0UGFyYW1zKHN0YXRlKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSksIHNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSksIHRoaXMucmFuZ2VGcm9tVG9WYWxpZGF0b3IodGhpcy5zdGVwVmFsaWRhdG9yKHZhbHVlcykpKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdNb2RlbEV2ZW50JywgdGhpcy5zdGF0ZSk7XG4gICAgfVxuICAgIGdldFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcbiAgICB9XG4gICAgaW5pdChzdGF0ZSkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoJ01vZGVsRXZlbnQnKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgc3BsaXRQYXJhbXMoZGF0YSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB7fTtcbiAgICAgICAgaWYgKCdmcm9tJyBpbiBkYXRhKVxuICAgICAgICAgICAgdmFsdWVzLmZyb20gPSBkYXRhLmZyb207XG4gICAgICAgIGlmICgndG8nIGluIGRhdGEpXG4gICAgICAgICAgICB2YWx1ZXMudG8gPSBkYXRhLnRvO1xuICAgICAgICBpZiAoJ3N0ZXAnIGluIGRhdGEpXG4gICAgICAgICAgICBzZXR0aW5ncy5zdGVwID0gZGF0YS5zdGVwO1xuICAgICAgICBpZiAoJ21pbicgaW4gZGF0YSlcbiAgICAgICAgICAgIHNldHRpbmdzLm1pbiA9IGRhdGEubWluO1xuICAgICAgICBpZiAoJ21heCcgaW4gZGF0YSlcbiAgICAgICAgICAgIHNldHRpbmdzLm1heCA9IGRhdGEubWF4O1xuICAgICAgICBpZiAoJ3NjYWxlRGVzdGlueScgaW4gZGF0YSlcbiAgICAgICAgICAgIHNldHRpbmdzLnNjYWxlRGVzdGlueSA9IGRhdGEuc2NhbGVEZXN0aW55O1xuICAgICAgICBpZiAoJ3NjYWxlJyBpbiBkYXRhKVxuICAgICAgICAgICAgc2V0dGluZ3Muc2NhbGUgPSBkYXRhLnNjYWxlO1xuICAgICAgICBpZiAoJ3JhbmdlJyBpbiBkYXRhKVxuICAgICAgICAgICAgc2V0dGluZ3MucmFuZ2UgPSBkYXRhLnJhbmdlO1xuICAgICAgICBpZiAoJ3RpcCcgaW4gZGF0YSlcbiAgICAgICAgICAgIHNldHRpbmdzLnRpcCA9IGRhdGEudGlwO1xuICAgICAgICBpZiAoJ2hvcml6b250YWwnIGluIGRhdGEpXG4gICAgICAgICAgICBzZXR0aW5ncy5ob3Jpem9udGFsID0gZGF0YS5ob3Jpem9udGFsO1xuICAgICAgICBpZiAoJ3Byb2dyZXNzJyBpbiBkYXRhKVxuICAgICAgICAgICAgc2V0dGluZ3MucHJvZ3Jlc3MgPSBkYXRhLnByb2dyZXNzO1xuICAgICAgICByZXR1cm4gW3ZhbHVlcywgc2V0dGluZ3NdO1xuICAgIH1cbiAgICBzdGVwVmFsaWRhdG9yKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY29weU9mRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xuICAgICAgICBmdW5jdGlvbiBjaGVja1N0ZXAodmFsdWUsIHN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiArKE1hdGgucm91bmQodmFsdWUgLyBzdGVwKSAqIHN0ZXApLnRvRml4ZWQoMik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHlPZkRhdGEuZnJvbSkge1xuICAgICAgICAgICAgY29weU9mRGF0YS5mcm9tID0gY2hlY2tTdGVwKGNvcHlPZkRhdGEuZnJvbSwgdGhpcy5zdGF0ZS5zdGVwKTtcbiAgICAgICAgICAgIGlmIChjb3B5T2ZEYXRhLmZyb20gPD0gdGhpcy5zdGF0ZS5taW4pXG4gICAgICAgICAgICAgICAgY29weU9mRGF0YS5mcm9tID0gdGhpcy5zdGF0ZS5taW47XG4gICAgICAgICAgICBlbHNlIGlmIChjb3B5T2ZEYXRhLmZyb20gPj0gdGhpcy5zdGF0ZS5tYXgpXG4gICAgICAgICAgICAgICAgY29weU9mRGF0YS5mcm9tID0gdGhpcy5zdGF0ZS5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHlPZkRhdGEudG8pIHtcbiAgICAgICAgICAgIGNvcHlPZkRhdGEudG8gPSBjaGVja1N0ZXAoY29weU9mRGF0YS50bywgdGhpcy5zdGF0ZS5zdGVwKTtcbiAgICAgICAgICAgIGlmIChjb3B5T2ZEYXRhLnRvIDw9IHRoaXMuc3RhdGUubWluKVxuICAgICAgICAgICAgICAgIGNvcHlPZkRhdGEudG8gPSB0aGlzLnN0YXRlLm1pbjtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvcHlPZkRhdGEudG8gPj0gdGhpcy5zdGF0ZS5tYXgpXG4gICAgICAgICAgICAgICAgY29weU9mRGF0YS50byA9IHRoaXMuc3RhdGUubWF4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5T2ZEYXRhO1xuICAgIH1cbiAgICByYW5nZUZyb21Ub1ZhbGlkYXRvcihkYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5yYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29weU9mU0RhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhKTtcbiAgICAgICAgY29uc3QgaXNGcm9tTm90VmFsaWRseSA9IGNvcHlPZlNEYXRhLmZyb20gJiYgdGhpcy5zdGF0ZS50byAtIGNvcHlPZlNEYXRhLmZyb20gPD0gMDtcbiAgICAgICAgY29uc3QgaXNUb05vdFZhbGlkbHkgPSBjb3B5T2ZTRGF0YS50byAmJiBjb3B5T2ZTRGF0YS50byAtIHRoaXMuc3RhdGUuZnJvbSA8PSAwO1xuICAgICAgICBpZiAoaXNGcm9tTm90VmFsaWRseSlcbiAgICAgICAgICAgIGNvcHlPZlNEYXRhLmZyb20gPSB0aGlzLnN0YXRlLnRvO1xuICAgICAgICBpZiAoaXNUb05vdFZhbGlkbHkpXG4gICAgICAgICAgICBjb3B5T2ZTRGF0YS50byA9IHRoaXMuc3RhdGUuZnJvbTtcbiAgICAgICAgcmV0dXJuIGNvcHlPZlNEYXRhO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE1vZGVsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjYWxjVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9jYWxjVXRpbHNcIik7XG5jb25zdCBFdmVudENyZWF0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vRXZlbnRDcmVhdG9yL0V2ZW50Q3JlYXRvclwiKSk7XG5jb25zdCBNb2RlbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9Nb2RlbC9Nb2RlbFwiKSk7XG5jb25zdCBWaWV3XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL1ZpZXcvVmlld1wiKSk7XG5jbGFzcyBQcmVzZW50ZXIgZXh0ZW5kcyBFdmVudENyZWF0b3JfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3Rvcihub2RlRWxlbSwgc3RhdGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IFZpZXdfMS5kZWZhdWx0KG5vZGVFbGVtKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBNb2RlbF8xLmRlZmF1bHQoc3RhdGUpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy52aWV3LnNldFN0YXRlKHRoaXMubW9kZWwuZ2V0U3RhdGUoKSk7XG4gICAgICAgIHRoaXMuYmluZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIGJpbmRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy52aWV3RXZlbnRIYW5kbGVyID0gdGhpcy52aWV3RXZlbnRIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubW9kZWxFdmVudEhhbmRsZXIgPSB0aGlzLm1vZGVsRXZlbnRIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudmlldy5hZGRFdmVudExpc3RlbmVyKCdWaWV3RXZlbnQnLCB0aGlzLnZpZXdFdmVudEhhbmRsZXIpO1xuICAgICAgICB0aGlzLm1vZGVsLmFkZEV2ZW50TGlzdGVuZXIoJ01vZGVsRXZlbnQnLCB0aGlzLm1vZGVsRXZlbnRIYW5kbGVyKTtcbiAgICB9XG4gICAgdmlld0V2ZW50SGFuZGxlcihlKSB7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMubW9kZWwuZ2V0U3RhdGUoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtaW4gPT09ICdudW1iZXInICYmIHR5cGVvZiBtYXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoZS5mcm9tKVxuICAgICAgICAgICAgICAgIGUuZnJvbSA9ICsoMCwgY2FsY1V0aWxzXzEuY29udmVydFBlcmNlbnRJblZhbHVlKShtaW4sIG1heCwgZS5mcm9tKS50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgaWYgKGUudG8pXG4gICAgICAgICAgICAgICAgZS50byA9ICsoMCwgY2FsY1V0aWxzXzEuY29udmVydFBlcmNlbnRJblZhbHVlKShtaW4sIG1heCwgZS50bykudG9GaXhlZCgzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGVsLnNldFN0YXRlKGUpO1xuICAgIH1cbiAgICBtb2RlbEV2ZW50SGFuZGxlcihlKSB7XG4gICAgICAgIHRoaXMudmlldy5zZXRTdGF0ZShlKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBQcmVzZW50ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L2V4dGVuc2lvbnMgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby11bnJlc29sdmVkICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjYWxjVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi91dGlscy9jYWxjVXRpbHNcIik7XG5jb25zdCBhYnN0cmFjdFN1YlZpZXdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYWJzdHJhY3RTdWJWaWV3L2Fic3RyYWN0U3ViVmlld1wiKSk7XG5jbGFzcyBIYW5kbGUgZXh0ZW5kcyBhYnN0cmFjdFN1YlZpZXdfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihzbGlkZXIpIHtcbiAgICAgICAgc3VwZXIoc2xpZGVyKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXgsIGZyb20sIGhvcml6b250YWwsIH0gPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSksIHsgbWluLCBtYXgsIGZyb20sIGhvcml6b250YWwgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICAgIGdldFBvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5ob3Jpem9udGFsKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJWaWV3VG9wID0gdGhpcy5zdWJWaWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgIGNvbnN0IHNsaWRlclRvcCA9IHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgIHJldHVybiBzdWJWaWV3VG9wIC0gc2xpZGVyVG9wICsgdGhpcy5zdWJWaWV3Lm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ViVmlld0xlZnQgPSB0aGlzLnN1YlZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgICAgY29uc3Qgc2xpZGVyTGVmdCA9IHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICAgIHJldHVybiBzdWJWaWV3TGVmdCAtIHNsaWRlckxlZnQgKyB0aGlzLnN1YlZpZXcub2Zmc2V0V2lkdGggLyAyO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVN1YlZpZXcoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KCdTdWJWaWV3RXZlbnQnKTtcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgICBjcmVhdGVTdWJWaWV3KCkge1xuICAgICAgICB0aGlzLnN1YlZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5zdWJWaWV3LmNsYXNzTGlzdC5hZGQoJ2pxLXNsaWRlcl9faGFuZGxlJyk7XG4gICAgICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKHRoaXMuc3ViVmlldyk7XG4gICAgfVxuICAgIGJpbmRFdmVudExpc3RlbmVyKCkge1xuICAgICAgICB0aGlzLnBvaW50ZXJTdGFydCA9IHRoaXMucG9pbnRlclN0YXJ0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3ViVmlldy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMucG9pbnRlclN0YXJ0KTtcbiAgICB9XG4gICAgcG9pbnRlclN0YXJ0KCkge1xuICAgICAgICB0aGlzLnBvaW50ZXJIYW5kbGVyID0gdGhpcy5wb2ludGVySGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLnBvaW50ZXJIYW5kbGVyKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMucG9pbnRlckhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5wb2ludGVySGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwb2ludGVySGFuZGxlcihlKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnU3ViVmlld0V2ZW50Jywge1xuICAgICAgICAgICAgdGFyZ2V0OiAnaGFuZGxlJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnN0YXRlLmhvcml6b250YWxcbiAgICAgICAgICAgICAgICA/IGUuY2xpZW50WSAtIHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgICAgICAgICAgICAgIDogZS5jbGllbnRYIC0gdGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgZnJvbSwgaG9yaXpvbnRhbCwgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IGlzTnVtYmVycyA9IHR5cGVvZiBtaW4gPT09ICdudW1iZXInICYmIHR5cGVvZiBtYXggPT09ICdudW1iZXInICYmIHR5cGVvZiBmcm9tID09PSAnbnVtYmVyJztcbiAgICAgICAgaWYgKGlzTnVtYmVycykge1xuICAgICAgICAgICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YlZpZXcuc3R5bGUudG9wID0gYCR7KDAsIGNhbGNVdGlsc18xLmNvbnZlcnRWYWx1ZUluUGVyY2VudCkobWluLCBtYXgsIGZyb20pfSVgO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3ViVmlldy5zdHlsZS5sZWZ0ID0gYCR7KDAsIGNhbGNVdGlsc18xLmNvbnZlcnRWYWx1ZUluUGVyY2VudCkobWluLCBtYXgsIGZyb20pfSVgO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gSGFuZGxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjYWxjVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi91dGlscy9jYWxjVXRpbHNcIik7XG5jb25zdCBIYW5kbGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9IYW5kbGVcIikpO1xuY2xhc3MgU2Vjb25kSGFuZGxlIGV4dGVuZHMgSGFuZGxlXzEuZGVmYXVsdCB7XG4gICAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgdG8sIGhvcml6b250YWwsIH0gPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zdGF0ZSksIHsgbWluLCBtYXgsIHRvLCBob3Jpem9udGFsIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBwb2ludGVySGFuZGxlcihlKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnU3ViVmlld0V2ZW50Jywge1xuICAgICAgICAgICAgdGFyZ2V0OiAnc2Vjb25kSGFuZGxlJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnN0YXRlLmhvcml6b250YWxcbiAgICAgICAgICAgICAgICA/IGUuY2xpZW50WSAtIHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgICAgICAgICAgICAgIDogZS5jbGllbnRYIC0gdGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgdG8sIGhvcml6b250YWwsIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBpc051bWJlcnMgPSB0eXBlb2YgbWluID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbWF4ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdG8gPT09ICdudW1iZXInO1xuICAgICAgICBpZiAoaXNOdW1iZXJzKSB7XG4gICAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3ViVmlldy5zdHlsZS50b3AgPSBgJHsoMCwgY2FsY1V0aWxzXzEuY29udmVydFZhbHVlSW5QZXJjZW50KShtaW4sIG1heCwgdG8pfSVgO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3ViVmlldy5zdHlsZS5sZWZ0ID0gYCR7KDAsIGNhbGNVdGlsc18xLmNvbnZlcnRWYWx1ZUluUGVyY2VudCkobWluLCBtYXgsIHRvKX0lYDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFNlY29uZEhhbmRsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY2FsY1V0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdXRpbHMvY2FsY1V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RTdWJWaWV3XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2Fic3RyYWN0U3ViVmlldy9hYnN0cmFjdFN1YlZpZXdcIikpO1xuY2xhc3MgU2NhbGUgZXh0ZW5kcyBhYnN0cmFjdFN1YlZpZXdfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihzbGlkZXIpIHtcbiAgICAgICAgc3VwZXIoc2xpZGVyKTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXgsIHN0ZXAsIGhvcml6b250YWwsIHNjYWxlRGVzdGlueSwgfSA9IHN0YXRlO1xuICAgICAgICBjb25zdCBvbGRTdGF0ZSA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpO1xuICAgICAgICB0aGlzLnN0YXRlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlKSwgeyBtaW4sIG1heCwgc3RlcCwgaG9yaXpvbnRhbCwgc2NhbGVEZXN0aW55IH0pO1xuICAgICAgICBpZiAob2xkU3RhdGUgIT09IEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdGUpKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlU3ViVmlldygpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoJ1N1YlZpZXdFdmVudCcpO1xuICAgIH1cbiAgICBjcmVhdGVTdWJWaWV3KCkge1xuICAgICAgICB0aGlzLnN1YlZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5zdWJWaWV3LmNsYXNzTGlzdC5hZGQoJ2pxLXNsaWRlcl9fc2NhbGUnKTtcbiAgICAgICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQodGhpcy5zdWJWaWV3KTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IG1pbiwgbWF4LCBzdGVwLCBob3Jpem9udGFsLCBzY2FsZURlc3RpbnksIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBpc0NvcnJlY3RQYXJhbXMgPSB0eXBlb2YgbWluID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbWF4ID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygc2NhbGVEZXN0aW55ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgJiYgdHlwZW9mIHN0ZXAgPT09ICdudW1iZXInICYmIHR5cGVvZiBob3Jpem9udGFsID09PSAnYm9vbGVhbic7XG4gICAgICAgIGlmIChpc0NvcnJlY3RQYXJhbXMpIHtcbiAgICAgICAgICAgIGxldCBwaXBzID0gdGhpcy5jcmVhdGVQaXBGcmFnbWVudChtaW4sIG1heCwgbWluKTtcbiAgICAgICAgICAgIGZvciAobGV0IHBpcCA9IG1pbiArIDE7IHBpcCA8IG1heDsgcGlwICs9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAocGlwICUgc2NhbGVEZXN0aW55ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBpcHMgKz0gdGhpcy5jcmVhdGVQaXBGcmFnbWVudChtaW4sIG1heCwgcGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwaXBzICs9IHRoaXMuY3JlYXRlUGlwRnJhZ21lbnQobWluLCBtYXgsIG1heCk7XG4gICAgICAgICAgICB0aGlzLnN1YlZpZXcuaW5uZXJIVE1MID0gcGlwcztcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50TGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVQaXBGcmFnbWVudChtaW4sIG1heCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgIDxkaXYgY2xhc3M9XCJqcS1zbGlkZXJfX3NjYWxlLXBpcFwiIHN0eWxlPVwidG9wOiR7KDAsIGNhbGNVdGlsc18xLmNvbnZlcnRQZXJjZW50SW5WYWx1ZSkoMCwgdGhpcy5zbGlkZXIuY2xpZW50SGVpZ2h0LCAoMCwgY2FsY1V0aWxzXzEuY29udmVydFZhbHVlSW5QZXJjZW50KShtaW4sIG1heCwgdmFsdWUpKX1weFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwianEtc2xpZGVyX19zY2FsZS1sYWJlbFwiPiR7dmFsdWV9PC9kaXY+XG4gICAgICA8L2Rpdj5gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgXG4gICAgICA8ZGl2IGNsYXNzPVwianEtc2xpZGVyX19zY2FsZS1waXBcIiBzdHlsZT1cImxlZnQ6JHsoMCwgY2FsY1V0aWxzXzEuY29udmVydFZhbHVlSW5QZXJjZW50KShtaW4sIG1heCwgdmFsdWUpfSVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImpxLXNsaWRlcl9fc2NhbGUtbGFiZWxcIj4ke3ZhbHVlfTwvZGl2PlxuICAgICAgPC9kaXY+YDtcbiAgICB9XG4gICAgYmluZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuY2xpY2tIYW5kbGVyID0gdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJWaWV3LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcS1zbGlkZXJfX3NjYWxlLWxhYmVsJykuZm9yRWFjaCgocGlwKSA9PiB7XG4gICAgICAgICAgICBpZiAocGlwIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwaXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjbGlja0hhbmRsZXIoZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5zdGF0ZS5ob3Jpem9udGFsXG4gICAgICAgICAgICAgICAgPyB0aGlzLnNsaWRlci5jbGllbnRIZWlnaHQgLyAxMDAgKiAoMCwgY2FsY1V0aWxzXzEuY29udmVydFZhbHVlSW5QZXJjZW50KShtaW4sIG1heCwgK2UudGFyZ2V0LmlubmVySFRNTClcbiAgICAgICAgICAgICAgICA6IHRoaXMuc2xpZGVyLmNsaWVudFdpZHRoIC8gMTAwICogKDAsIGNhbGNVdGlsc18xLmNvbnZlcnRWYWx1ZUluUGVyY2VudCkobWluLCBtYXgsICtlLnRhcmdldC5pbm5lckhUTUwpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdTdWJWaWV3RXZlbnQnLCB7IHRhcmdldDogJ3RyYWNrJywgcG9zaXRpb24gfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTY2FsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY2FsY1V0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vdXRpbHMvY2FsY1V0aWxzXCIpO1xuY29uc3QgVGlwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVGlwXCIpKTtcbmNsYXNzIFNlY29uZFRpcCBleHRlbmRzIFRpcF8xLmRlZmF1bHQge1xuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIGNvbnN0IHsgbWluID0gdGhpcy5zdGF0ZS5taW4sIG1heCA9IHRoaXMuc3RhdGUubWF4LCB0byA9IHRoaXMuc3RhdGUudG8sIGhvcml6b250YWwgPSB0aGlzLnN0YXRlLmhvcml6b250YWwsIH0gPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG1pbiwgbWF4LCB0bywgaG9yaXpvbnRhbCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IG1pbiwgbWF4LCB0bywgaG9yaXpvbnRhbCwgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IGlzTnVtYmVycyA9IHR5cGVvZiBtaW4gPT09ICdudW1iZXInICYmIHR5cGVvZiBtYXggPT09ICdudW1iZXInICYmIHR5cGVvZiB0byA9PT0gJ251bWJlcic7XG4gICAgICAgIGlmIChpc051bWJlcnMpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIHRoaXMuaXNEb3VibGUgPyB0aGlzLnN1YlZpZXcuc3R5bGUub3BhY2l0eSA9ICcwJyA6IHRoaXMuc3ViVmlldy5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgICAgICAgdGhpcy5zdWJWaWV3LnRleHRDb250ZW50ID0gdG8udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJWaWV3LnN0eWxlLnRvcCA9IGAkeygwLCBjYWxjVXRpbHNfMS5jb252ZXJ0VmFsdWVJblBlcmNlbnQpKG1pbiwgbWF4LCB0byl9JWA7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdWJWaWV3LnN0eWxlLmxlZnQgPSBgJHsoMCwgY2FsY1V0aWxzXzEuY29udmVydFZhbHVlSW5QZXJjZW50KShtaW4sIG1heCwgdG8pfSVgO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gU2Vjb25kVGlwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjYWxjVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi91dGlscy9jYWxjVXRpbHNcIik7XG5jb25zdCBhYnN0cmFjdFN1YlZpZXdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYWJzdHJhY3RTdWJWaWV3L2Fic3RyYWN0U3ViVmlld1wiKSk7XG5jbGFzcyBUaXAgZXh0ZW5kcyBhYnN0cmFjdFN1YlZpZXdfMS5kZWZhdWx0IHtcbiAgICBjb25zdHJ1Y3RvcihzbGlkZXIpIHtcbiAgICAgICAgc3VwZXIoc2xpZGVyKTtcbiAgICAgICAgdGhpcy5pc0RvdWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgZnJvbSwgdG8sIGhvcml6b250YWwsIH0gPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG1pbiwgbWF4LCBmcm9tLCB0bywgaG9yaXpvbnRhbCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gICAgY2hhbmdlSXNEb3VibGUodmFsKSB7XG4gICAgICAgIHRoaXMuaXNEb3VibGUgPSB2YWw7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlU3ViVmlldygpO1xuICAgIH1cbiAgICBjcmVhdGVTdWJWaWV3KCkge1xuICAgICAgICB0aGlzLnN1YlZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5zdWJWaWV3LmNsYXNzTGlzdC5hZGQoJ2pxLXNsaWRlcl9fdGlwJyk7XG4gICAgICAgIHRoaXMuc2xpZGVyLmFwcGVuZENoaWxkKHRoaXMuc3ViVmlldyk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgZnJvbSwgaG9yaXpvbnRhbCwgdG8sIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBpc051bWJlcnMgPSB0eXBlb2YgbWluID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgbWF4ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgJiYgdHlwZW9mIGZyb20gPT09ICdudW1iZXInICYmIHR5cGVvZiBmcm9tID09PSAnbnVtYmVyJztcbiAgICAgICAgaWYgKGlzTnVtYmVycykge1xuICAgICAgICAgICAgdGhpcy5zdWJWaWV3LnRleHRDb250ZW50ID0gdGhpcy5pc0RvdWJsZSA/IGAke2Zyb219IC0gJHt0b31gIDogZnJvbS50b1N0cmluZygpO1xuICAgICAgICAgICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YlZpZXcuc3R5bGUudG9wID0gYCR7KDAsIGNhbGNVdGlsc18xLmNvbnZlcnRWYWx1ZUluUGVyY2VudCkobWluLCBtYXgsIGZyb20pfSVgO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3ViVmlldy5zdHlsZS5sZWZ0ID0gYCR7KDAsIGNhbGNVdGlsc18xLmNvbnZlcnRWYWx1ZUluUGVyY2VudCkobWluLCBtYXgsIGZyb20pfSVgO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVGlwO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjYWxjVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi91dGlscy9jYWxjVXRpbHNcIik7XG5jb25zdCBhYnN0cmFjdFN1YlZpZXdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vYWJzdHJhY3RTdWJWaWV3L2Fic3RyYWN0U3ViVmlld1wiKSk7XG5jbGFzcyBUcmFjayBleHRlbmRzIGFic3RyYWN0U3ViVmlld18xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKHNsaWRlcikge1xuICAgICAgICBzdXBlcihzbGlkZXIpO1xuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgZnJvbSwgdG8sIGhvcml6b250YWwsIHJhbmdlLCBwcm9ncmVzcywgfSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnN0YXRlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXRlKSwgeyBtaW4sIG1heCwgZnJvbSwgdG8sIGhvcml6b250YWwsIHJhbmdlLCBwcm9ncmVzcyB9KTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gICAgY3JlYXRlU3ViVmlldygpIHtcbiAgICAgICAgdGhpcy5zdWJWaWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuc3ViVmlldy5jbGFzc0xpc3QuYWRkKCdqcS1zbGlkZXJfX3RyYWNrJyk7XG4gICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5wcm9ncmVzcy5jbGFzc0xpc3QuYWRkKCdqcS1zbGlkZXJfX3Byb2dyZXNzJyk7XG4gICAgICAgIHRoaXMuc3ViVmlldy5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzKTtcbiAgICAgICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQodGhpcy5zdWJWaWV3KTtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVTdWJWaWV3KCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudCgnU3ViVmlld0V2ZW50Jyk7XG4gICAgICAgIHRoaXMuYmluZEV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG4gICAgYmluZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuY2xpY2tIYW5kbGVyID0gdGhpcy5jbGlja0hhbmRsZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdWJWaWV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0hhbmRsZXIpO1xuICAgIH1cbiAgICBjbGlja0hhbmRsZXIoZSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ1N1YlZpZXdFdmVudCcsIHtcbiAgICAgICAgICAgIHRhcmdldDogJ3RyYWNrJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnN0YXRlLmhvcml6b250YWxcbiAgICAgICAgICAgICAgICA/IGUuY2xpZW50WSAtIHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuICAgICAgICAgICAgICAgIDogZS5jbGllbnRYIC0gdGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgZnJvbSwgdG8sIGhvcml6b250YWwsIHJhbmdlLCBwcm9ncmVzcywgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmICghcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MucmVtb3ZlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNOdW1iZXJzID0gdHlwZW9mIG1pbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG1heCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICYmIHR5cGVvZiBmcm9tID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdG8gPT09ICdudW1iZXInO1xuICAgICAgICBpZiAoaXNOdW1iZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9ICgwLCBjYWxjVXRpbHNfMS5jb252ZXJ0VmFsdWVJblBlcmNlbnQpKG1pbiwgbWF4LCBmcm9tKTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9ICgwLCBjYWxjVXRpbHNfMS5jb252ZXJ0VmFsdWVJblBlcmNlbnQpKG1pbiwgbWF4LCB0byk7XG4gICAgICAgICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBlbmQgLSBzdGFydDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcy5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9JWA7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcy5zdHlsZS5tYXJnaW5Ub3AgPSBgJHt0aGlzLnNsaWRlci5jbGllbnRIZWlnaHQgLyAxMDAgKiBzdGFydH1weGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzLnN0eWxlLmhlaWdodCA9IGAke3N0YXJ0fSVgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGVuZCAtIHN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHt3aWR0aH0lYDtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzLnN0eWxlLm1hcmdpbkxlZnQgPSBgJHtzdGFydH0lYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHtzdGFydH0lYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFRyYWNrO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1taXhlZC1vcGVyYXRvcnMgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9leHRlbnNpb25zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCAqL1xuY29uc3QgSGFuZGxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU3ViVmlld0NvbXBvbmVudHMvSGFuZGxlL0hhbmRsZVwiKSk7XG5jb25zdCBFdmVudENyZWF0b3JfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vRXZlbnRDcmVhdG9yL0V2ZW50Q3JlYXRvclwiKSk7XG5jb25zdCBTZWNvbmRIYW5kbGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9TdWJWaWV3Q29tcG9uZW50cy9IYW5kbGUvU2Vjb25kSGFuZGxlXCIpKTtcbmNvbnN0IFRpcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N1YlZpZXdDb21wb25lbnRzL1RpcC9UaXBcIikpO1xuY29uc3QgU2Vjb25kVGlwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU3ViVmlld0NvbXBvbmVudHMvVGlwL1NlY29uZFRpcFwiKSk7XG5jb25zdCBUcmFja18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1N1YlZpZXdDb21wb25lbnRzL1RyYWNrL1RyYWNrXCIpKTtcbmNvbnN0IGNhbGNVdGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2NhbGNVdGlsc1wiKTtcbmNvbnN0IFNjYWxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vU3ViVmlld0NvbXBvbmVudHMvU2NhbGUvU2NhbGVcIikpO1xuY2xhc3MgVmlldyBleHRlbmRzIEV2ZW50Q3JlYXRvcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKG5vZGVFbGVtKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubm9kZUVsZW0gPSBub2RlRWxlbTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gW107XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuY2hlY2tTZXR0aW5ncyhzdGF0ZSk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUpLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlKHRoaXMuc3RhdGUpO1xuICAgICAgICB0aGlzLmNoZWNrVGlwcygpO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVNsaWRlcigpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoJ1ZpZXdFdmVudCcpO1xuICAgIH1cbiAgICBjcmVhdGVTbGlkZXIoKSB7XG4gICAgICAgIHRoaXMuc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuc2xpZGVyLmNsYXNzTGlzdC5hZGQoJ2pxLXNsaWRlcicpO1xuICAgICAgICB0aGlzLm5vZGVFbGVtLmFwcGVuZENoaWxkKHRoaXMuc2xpZGVyKTtcbiAgICB9XG4gICAgY3JlYXRlQ29tcG9uZW50cyhzdGF0ZSkge1xuICAgICAgICBjb25zdCB7IHJhbmdlLCB0aXAsIHNjYWxlLCBob3Jpem9udGFsLCB9ID0gc3RhdGU7XG4gICAgICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICAgICAgICB0aGlzLnNsaWRlci5jbGFzc0xpc3QuYWRkKCdqcS1zbGlkZXItLWhvcml6b250YWwnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChuZXcgSGFuZGxlXzEuZGVmYXVsdCh0aGlzLnNsaWRlcikpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChuZXcgVHJhY2tfMS5kZWZhdWx0KHRoaXMuc2xpZGVyKSk7XG4gICAgICAgIGlmICh0aXApIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKG5ldyBUaXBfMS5kZWZhdWx0KHRoaXMuc2xpZGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChuZXcgU2Vjb25kSGFuZGxlXzEuZGVmYXVsdCh0aGlzLnNsaWRlcikpO1xuICAgICAgICAgICAgaWYgKHRpcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKG5ldyBTZWNvbmRUaXBfMS5kZWZhdWx0KHRoaXMuc2xpZGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjYWxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChuZXcgU2NhbGVfMS5kZWZhdWx0KHRoaXMuc2xpZGVyKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYmluZEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgICAgIHRoaXMuc3ViVmlld0V2ZW50SGFuZGxlciA9IHRoaXMuc3ViVmlld0V2ZW50SGFuZGxlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMuZm9yRWFjaCgoY29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmV2ZW50cy5TdWJWaWV3RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuYWRkRXZlbnRMaXN0ZW5lcignU3ViVmlld0V2ZW50JywgdGhpcy5zdWJWaWV3RXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN1YlZpZXdFdmVudEhhbmRsZXIoZSkge1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5zdGF0ZS5ob3Jpem9udGFsID8gdGhpcy5zbGlkZXIuY2xpZW50SGVpZ2h0IDogdGhpcy5zbGlkZXIuY2xpZW50V2lkdGg7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gJ2hhbmRsZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSAoMCwgY2FsY1V0aWxzXzEuY29udmVydFBpeGVsSW5QZXJjZW50KShzaXplLCBlLnBvc2l0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnVmlld0V2ZW50JywgeyBmcm9tIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gJ3NlY29uZEhhbmRsZScpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvID0gKDAsIGNhbGNVdGlsc18xLmNvbnZlcnRQaXhlbEluUGVyY2VudCkoc2l6ZSwgZS5wb3NpdGlvbik7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ1ZpZXdFdmVudCcsIHsgdG8gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSAndHJhY2snIHx8IGUudGFyZ2V0ID09PSAnc2NhbGUnKSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVzID0gdGhpcy5nZXRBcnJPZkNvbmNyZXRlU3ViVmlldyhIYW5kbGVfMS5kZWZhdWx0KTtcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSBoYW5kbGVzWzBdLmdldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5yYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvID0gaGFuZGxlc1sxXS5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhmcm9tIC0gZS5wb3NpdGlvbikgPCB0byAtIGUucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdWaWV3RXZlbnQnLCB7IGZyb206ICgwLCBjYWxjVXRpbHNfMS5jb252ZXJ0UGl4ZWxJblBlcmNlbnQpKHNpemUsIGUucG9zaXRpb24pIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnVmlld0V2ZW50JywgeyB0bzogKDAsIGNhbGNVdGlsc18xLmNvbnZlcnRQaXhlbEluUGVyY2VudCkoc2l6ZSwgZS5wb3NpdGlvbikgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdWaWV3RXZlbnQnLCB7IGZyb206ICgwLCBjYWxjVXRpbHNfMS5jb252ZXJ0UGl4ZWxJblBlcmNlbnQpKHNpemUsIGUucG9zaXRpb24pIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoZWNrU2V0dGluZ3Moc3RhdGUpIHtcbiAgICAgICAgY29uc3QgeyByYW5nZSwgdGlwLCBzY2FsZSwgaG9yaXpvbnRhbCwgcHJvZ3Jlc3MsIHNjYWxlRGVzdGlueSwgfSA9IHN0YXRlO1xuICAgICAgICBjb25zdCBpc1VwZGF0ZVNldHRpbmdzID0gcmFuZ2UgIT09IHRoaXMuc3RhdGUucmFuZ2UgfHwgdGlwICE9PSB0aGlzLnN0YXRlLnRpcFxuICAgICAgICAgICAgfHwgc2NhbGUgIT09IHRoaXMuc3RhdGUuc2NhbGUgfHwgaG9yaXpvbnRhbCAhPT0gdGhpcy5zdGF0ZS5ob3Jpem9udGFsXG4gICAgICAgICAgICB8fCBwcm9ncmVzcyAhPT0gdGhpcy5zdGF0ZS5wcm9ncmVzcyB8fCBzY2FsZURlc3RpbnkgIT09IHRoaXMuc3RhdGUuc2NhbGVEZXN0aW55O1xuICAgICAgICBpZiAoaXNVcGRhdGVTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzID0gW107XG4gICAgICAgICAgICB0aGlzLnNsaWRlci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50cyhzdGF0ZSk7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudExpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tUaXBzKCkge1xuICAgICAgICBjb25zdCB7IHRpcCwgcmFuZ2UsIGhvcml6b250YWwgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGlmICh0aXAgJiYgcmFuZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpcHMgPSB0aGlzLmdldEFyck9mQ29uY3JldGVTdWJWaWV3KFRpcF8xLmRlZmF1bHQpO1xuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IGhvcml6b250YWwgPyB0aXBzWzFdLnN1YlZpZXcuY2xpZW50SGVpZ2h0IDogdGlwc1sxXS5zdWJWaWV3Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgY29uc3QgZmlyc3RQb3NpdGlvbiA9IHRpcHNbMF0uZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IHNlY29uZFBvc2l0aW9uID0gdGlwc1sxXS5nZXRQb3NpdGlvbigpIC0gc2l6ZTtcbiAgICAgICAgICAgIGlmIChmaXJzdFBvc2l0aW9uID4gc2Vjb25kUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aXBzLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdC5jaGFuZ2VJc0RvdWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRTdGF0ZSh0aGlzLnN0YXRlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpcHMuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0LmNoYW5nZUlzRG91YmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzLmZvckVhY2goKGNvbXBvbmVudCkgPT4gY29tcG9uZW50LnNldFN0YXRlKHN0YXRlKSk7XG4gICAgfVxuICAgIGdldEFyck9mQ29uY3JldGVTdWJWaWV3KGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuZmlsdGVyKChjb21wb25lbnQpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gY29tcG9uZW50IGluc3RhbmNlb2YgaW5zdGFuY2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNvbXBvbmVudDsgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVmlldztcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgRXZlbnRDcmVhdG9yXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL0V2ZW50Q3JlYXRvci9FdmVudENyZWF0b3JcIikpO1xuY2xhc3MgU3ViVmlldyBleHRlbmRzIEV2ZW50Q3JlYXRvcl8xLmRlZmF1bHQge1xuICAgIGNvbnN0cnVjdG9yKHNsaWRlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIH1cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViVmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViVmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFN1YlZpZXc7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuLyogZXNsaW50LWRpc2FibGUgZnVuYy1uYW1lcyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvbm8tdW5yZXNvbHZlZCAqL1xuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L2V4dGVuc2lvbnMgKi9cbnJlcXVpcmUoXCIuL3NsaWRlci5zY3NzXCIpO1xuY29uc3QgUHJlc2VudGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vQXBwQ29tcG9uZW50cy9QcmVzZW50ZXIvUHJlc2VudGVyXCIpKTtcbihmdW5jdGlvbiAoJCkge1xuICAgIGNvbnN0IG1ldGhvZHMgPSB7XG4gICAgICAgIGluaXQoc3RhdGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghJCh0aGlzKS5kYXRhKCdqcVNsaWRlcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoKS5qcVNsaWRlciA9IG5ldyBQcmVzZW50ZXJfMS5kZWZhdWx0KHRoaXMsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1cGRhdGUoc3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGpxU2xpZGVyID0gJCh0aGlzKS5kYXRhKCdqcVNsaWRlcicpO1xuICAgICAgICAgICAganFTbGlkZXIudXBkYXRlKHsgdHlwZTogJ3VwZGF0ZVBsdWdpbicsIHBheWxvYWQ6IHN0YXRlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkNoYW5nZShjYWxsYmFjaykge1xuICAgICAgICAgICAgY29uc3QganFTbGlkZXIgPSAkKHRoaXMpLmRhdGEoJ2pxU2xpZGVyJyk7XG4gICAgICAgICAgICBqcVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdvbkNoYW5nZScsIChlKSA9PiBjYWxsYmFjayhlKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAkLmZuLmpxU2xpZGVyID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgaXNFbXB0eUFyZ3MgPSBhcmdzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCc7XG4gICAgICAgIGNvbnN0IGlzVXBkYXRlID0gYXJncy5sZW5ndGggPj0gMiAmJiBhcmdzWzBdID09PSAndXBkYXRlJztcbiAgICAgICAgY29uc3QgaXNCaW5kRXZlbnRMaXN0ZW5lciA9IGFyZ3MubGVuZ3RoID49IDIgJiYgYXJnc1swXSA9PT0gJ29uQ2hhbmdlJztcbiAgICAgICAgaWYgKGlzRW1wdHlBcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGFyZ3NbMF0gPyBhcmdzWzBdIDoge307XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcy5pbml0LmNhbGwodGhpcywgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1VwZGF0ZSAmJiB0eXBlb2YgYXJnc1sxXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gYXJnc1sxXTtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2RzLnVwZGF0ZS5jYWxsKHRoaXMsIHN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNCaW5kRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBhcmdzWzFdO1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZHMub25DaGFuZ2UuY2FsbCh0aGlzLCAoZSkgPT4gY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfTtcbn0oalF1ZXJ5KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29udmVydFBlcmNlbnRJblZhbHVlID0gZXhwb3J0cy5jb252ZXJ0UGl4ZWxJblBlcmNlbnQgPSBleHBvcnRzLmNvbnZlcnRWYWx1ZUluUGVyY2VudCA9IHZvaWQgMDtcbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xuZnVuY3Rpb24gY29udmVydFZhbHVlSW5QZXJjZW50KG1pbiwgbWF4LCB2YWx1ZSkge1xuICAgIHJldHVybiAxMDAgLyAobWF4IC0gbWluKSAqICh2YWx1ZSAtIG1pbik7XG59XG5leHBvcnRzLmNvbnZlcnRWYWx1ZUluUGVyY2VudCA9IGNvbnZlcnRWYWx1ZUluUGVyY2VudDtcbmZ1bmN0aW9uIGNvbnZlcnRQaXhlbEluUGVyY2VudCh3aWR0aCwgdmFsdWUpIHtcbiAgICByZXR1cm4gMTAwIC8gd2lkdGggKiB2YWx1ZTtcbn1cbmV4cG9ydHMuY29udmVydFBpeGVsSW5QZXJjZW50ID0gY29udmVydFBpeGVsSW5QZXJjZW50O1xuZnVuY3Rpb24gY29udmVydFBlcmNlbnRJblZhbHVlKG1pbiwgbWF4LCBwZXJjZW50KSB7XG4gICAgcmV0dXJuIChtYXggLSBtaW4pIC8gMTAwICogcGVyY2VudCArIG1pbjtcbn1cbmV4cG9ydHMuY29udmVydFBlcmNlbnRJblZhbHVlID0gY29udmVydFBlcmNlbnRJblZhbHVlO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzQpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTXlFdmVudCIsImNvbnN0cnVjdG9yIiwibmFtZSIsInRoaXMiLCJjYWxsYmFja3MiLCJyZWdpc3RlckNhbGxiYWNrIiwiY2FsbGJhY2siLCJwdXNoIiwiZXZlbnRzIiwicmVnaXN0ZXJFdmVudCIsImV2ZW50TmFtZSIsImV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImV2ZW50QXJncyIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIkV2ZW50Q3JlYXRvcl8xIiwiTW9kZWwiLCJkZWZhdWx0Iiwic3RhdGUiLCJzdXBlciIsIm1pbiIsIm1heCIsImZyb20iLCJ0byIsInN0ZXAiLCJ0aXAiLCJyYW5nZSIsInByb2dyZXNzIiwic2NhbGUiLCJzY2FsZURlc3RpbnkiLCJob3Jpem9udGFsIiwiaW5pdCIsInNldFN0YXRlIiwidmFsdWVzIiwic2V0dGluZ3MiLCJzcGxpdFBhcmFtcyIsImFzc2lnbiIsInJhbmdlRnJvbVRvVmFsaWRhdG9yIiwic3RlcFZhbGlkYXRvciIsImdldFN0YXRlIiwiZGF0YSIsImNvcHlPZkRhdGEiLCJjaGVja1N0ZXAiLCJNYXRoIiwicm91bmQiLCJ0b0ZpeGVkIiwiY29weU9mU0RhdGEiLCJpc0Zyb21Ob3RWYWxpZGx5IiwiaXNUb05vdFZhbGlkbHkiLCJjYWxjVXRpbHNfMSIsIk1vZGVsXzEiLCJWaWV3XzEiLCJQcmVzZW50ZXIiLCJub2RlRWxlbSIsInZpZXciLCJtb2RlbCIsImJpbmRFdmVudExpc3RlbmVycyIsInZpZXdFdmVudEhhbmRsZXIiLCJiaW5kIiwibW9kZWxFdmVudEhhbmRsZXIiLCJlIiwiY29udmVydFBlcmNlbnRJblZhbHVlIiwiYWJzdHJhY3RTdWJWaWV3XzEiLCJIYW5kbGUiLCJzbGlkZXIiLCJ1cGRhdGUiLCJnZXRQb3NpdGlvbiIsInN1YlZpZXciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJvZmZzZXRIZWlnaHQiLCJsZWZ0Iiwib2Zmc2V0V2lkdGgiLCJjcmVhdGVTdWJWaWV3IiwiYmluZEV2ZW50TGlzdGVuZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsInBvaW50ZXJTdGFydCIsInBvaW50ZXJIYW5kbGVyIiwid2luZG93IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRhcmdldCIsInBvc2l0aW9uIiwiY2xpZW50WSIsImNsaWVudFgiLCJzdHlsZSIsImNvbnZlcnRWYWx1ZUluUGVyY2VudCIsIkhhbmRsZV8xIiwiU2Vjb25kSGFuZGxlIiwiU2NhbGUiLCJvbGRTdGF0ZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwaXBzIiwiY3JlYXRlUGlwRnJhZ21lbnQiLCJwaXAiLCJpbm5lckhUTUwiLCJjbGllbnRIZWlnaHQiLCJjbGlja0hhbmRsZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiSFRNTEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsIlRpcF8xIiwiU2Vjb25kVGlwIiwiaXNEb3VibGUiLCJvcGFjaXR5IiwidGV4dENvbnRlbnQiLCJ0b1N0cmluZyIsIlRpcCIsImNoYW5nZUlzRG91YmxlIiwidmFsIiwiVHJhY2siLCJzdGFydCIsImVuZCIsImhlaWdodCIsIm1hcmdpblRvcCIsIndpZHRoIiwibWFyZ2luTGVmdCIsInJlbW92ZSIsIlNlY29uZEhhbmRsZV8xIiwiU2Vjb25kVGlwXzEiLCJUcmFja18xIiwiU2NhbGVfMSIsIlZpZXciLCJjb21wb25lbnRzIiwiY2hlY2tTZXR0aW5ncyIsImNoZWNrVGlwcyIsImNyZWF0ZVNsaWRlciIsImNyZWF0ZUNvbXBvbmVudHMiLCJzdWJWaWV3RXZlbnRIYW5kbGVyIiwiY29tcG9uZW50IiwiU3ViVmlld0V2ZW50Iiwic2l6ZSIsImNvbnZlcnRQaXhlbEluUGVyY2VudCIsImhhbmRsZXMiLCJnZXRBcnJPZkNvbmNyZXRlU3ViVmlldyIsImFicyIsInRpcHMiLCJ0IiwiaW5zdGFuY2UiLCJmaWx0ZXIiLCJfYSIsIlN1YlZpZXciLCJQcmVzZW50ZXJfMSIsIiQiLCJtZXRob2RzIiwiZWFjaCIsImpxU2xpZGVyIiwidHlwZSIsInBheWxvYWQiLCJvbkNoYW5nZSIsImZuIiwiYXJncyIsImlzRW1wdHlBcmdzIiwibGVuZ3RoIiwiaXNVcGRhdGUiLCJpc0JpbmRFdmVudExpc3RlbmVyIiwiY2FsbCIsImpRdWVyeSIsInBlcmNlbnQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==
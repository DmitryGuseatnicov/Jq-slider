(()=>{"use strict";var t={983:(t,e,i)=>{i.r(e)},49:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t){this.name=t,this.callbacks=[]}registerCallback(t){this.callbacks.push(t)}}e.default=class{constructor(){this.events={}}registerEvent(t){const e=new i(t);this.events[t]=e}dispatchEvent(t,e){this.events[t].callbacks.forEach((t=>{t(e)}))}addEventListener(t,e){this.events[t].registerCallback(e)}}},889:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(49));class r extends n.default{constructor(t){super(),this.state={min:0,max:100,from:0,to:100,step:1,tip:!0,range:!0,progress:!0,scale:!0,scaleDestiny:10,horizontal:!1},this.init(t)}setState(t){const[e,i]=this.splitParams(t);this.state=Object.assign(Object.assign({},this.state),i),this.state=Object.assign(Object.assign({},this.state),this.rangeFromToValidator(this.stepValidator(e))),this.dispatchEvent("ModelEvent",this.state)}getState(){return this.state}init(t){this.registerEvent("ModelEvent"),this.setState(t)}splitParams(t){const e={},i={};return"from"in t&&(e.from=t.from),"to"in t&&(e.to=t.to),"step"in t&&(i.step=t.step),"min"in t&&(i.min=t.min),"max"in t&&(i.max=t.max),"scaleDestiny"in t&&(i.scaleDestiny=t.scaleDestiny),"scale"in t&&(i.scale=t.scale),"range"in t&&(i.range=t.range),"tip"in t&&(i.tip=t.tip),"horizontal"in t&&(i.horizontal=t.horizontal),"progress"in t&&(i.progress=t.progress),[e,i]}stepValidator(t){const e=Object.assign({},t);function i(t,e){return+(Math.round(t/e)*e).toFixed(2)}return"number"==typeof e.from&&(e.from=i(e.from,this.state.step),e.from<=this.state.min?e.from=this.state.min:e.from>=this.state.max&&(e.from=this.state.max)),"number"==typeof e.to&&(e.to=i(e.to,this.state.step),e.to<=this.state.min?e.to=this.state.min:e.to>=this.state.max&&(e.to=this.state.max)),e}rangeFromToValidator(t){if(!this.state.range)return t;const e=Object.assign({},t),i=e.from&&this.state.to-e.from<=0,s=e.to&&e.to-this.state.from<=0;return this.state.from>this.state.to&&(this.state.from=this.state.to),i&&(e.from=this.state.to),s&&(e.to=this.state.from),e}}e.default=r},731:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(49)),o=s(i(889)),a=s(i(498));class l extends r.default{constructor(t,e){super(),this.view=new a.default(t),this.model=new o.default(e),this.registerEvent("onChange"),this.init()}init(){this.view.setState(this.model.getState()),this.bindEventListeners()}bindEventListeners(){this.viewEventHandler=this.viewEventHandler.bind(this),this.modelEventHandler=this.modelEventHandler.bind(this),this.view.addEventListener("ViewEvent",this.viewEventHandler),this.model.addEventListener("ModelEvent",this.modelEventHandler)}viewEventHandler(t){const{min:e,max:i}=this.model.getState();"number"==typeof e&&"number"==typeof i&&(t.from&&(t.from=+(0,n.convertPercentInValue)(e,i,t.from).toFixed(3)),t.to&&(t.to=+(0,n.convertPercentInValue)(e,i,t.to).toFixed(3))),this.model.setState(t)}modelEventHandler(t){this.dispatchEvent("onChange",t),this.view.setState(t)}}e.default=l},254:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.init()}setState(t){const{min:e,max:i,from:s,horizontal:n}=t;this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,from:s,horizontal:n}),this.update()}getPosition(){return this.state.horizontal?this.subView.getBoundingClientRect().top-this.slider.getBoundingClientRect().top+this.subView.offsetHeight/2:this.subView.getBoundingClientRect().left-this.slider.getBoundingClientRect().left+this.subView.offsetWidth/2}init(){this.createSubView(),this.registerEvent("SubViewEvent"),this.bindEventListener()}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__handle"),this.slider.appendChild(this.subView)}bindEventListener(){this.pointerStart=this.pointerStart.bind(this),this.subView.addEventListener("pointerdown",this.pointerStart)}pointerStart(){this.pointerHandler=this.pointerHandler.bind(this),window.addEventListener("pointermove",this.pointerHandler),window.addEventListener("pointerup",(()=>{window.removeEventListener("pointermove",this.pointerHandler),window.removeEventListener("pointermove",this.pointerHandler)}))}pointerHandler(t){this.dispatchEvent("SubViewEvent",{target:"handle",position:this.state.horizontal?t.clientY-this.slider.getBoundingClientRect().top:t.clientX-this.slider.getBoundingClientRect().left})}update(){const{min:t,max:e,from:i,horizontal:s}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i){if(s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},712:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(254));class o extends r.default{setState(t){const{min:e,max:i,to:s,horizontal:n}=t;this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,to:s,horizontal:n}),this.update()}pointerHandler(t){this.dispatchEvent("SubViewEvent",{target:"secondHandle",position:this.state.horizontal?t.clientY-this.slider.getBoundingClientRect().top:t.clientX-this.slider.getBoundingClientRect().left})}update(){const{min:t,max:e,to:i,horizontal:s}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i){if(s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},25:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.init()}setState(t){const{min:e,max:i,step:s,horizontal:n,scaleDestiny:r}=t,o=JSON.stringify(this.state);this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,step:s,horizontal:n,scaleDestiny:r}),o!==JSON.stringify(this.state)&&this.update()}init(){this.createSubView(),this.registerEvent("SubViewEvent")}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__scale"),this.slider.appendChild(this.subView)}update(){const{min:t,max:e,step:i,horizontal:s,scaleDestiny:n}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof n&&"number"==typeof i&&"boolean"==typeof s){let i=this.createPipFragment(t,e,t);for(let s=t+1;s<e;s+=1)s%n==0&&(i+=this.createPipFragment(t,e,s));i+=this.createPipFragment(t,e,e),this.subView.innerHTML=i,this.bindEventListener()}}createPipFragment(t,e,i){return this.state.horizontal?`\n      <div class="jq-slider__scale-pip" style="top:${(0,n.convertPercentInValue)(0,this.slider.clientHeight,(0,n.convertValueInPercent)(t,e,i))}px">\n        <div class="jq-slider__scale-label">${i}</div>\n      </div>`:`\n      <div class="jq-slider__scale-pip" style="left:${(0,n.convertValueInPercent)(t,e,i)}%">\n        <div class="jq-slider__scale-label">${i}</div>\n      </div>`}bindEventListener(){this.clickHandler=this.clickHandler.bind(this),this.subView.querySelectorAll(".jq-slider__scale-label").forEach((t=>{t instanceof HTMLElement&&t.addEventListener("click",this.clickHandler)}))}clickHandler(t){if(t.target instanceof HTMLElement){const{min:e,max:i}=this.state,s=this.state.horizontal?this.slider.clientHeight/100*(0,n.convertValueInPercent)(e,i,+t.target.innerHTML):this.slider.clientWidth/100*(0,n.convertValueInPercent)(e,i,+t.target.innerHTML);this.dispatchEvent("SubViewEvent",{target:"track",position:s})}}}e.default=o},573:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(841));class o extends r.default{setState(t){const{min:e=this.state.min,max:i=this.state.max,to:s=this.state.to,horizontal:n=this.state.horizontal}=t;this.state={min:e,max:i,to:s,horizontal:n},this.update()}update(){const{min:t,max:e,to:i,horizontal:s}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i){if(this.isDouble?this.subView.style.opacity="0":this.subView.style.opacity="1",this.subView.textContent=i.toString(),s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},841:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.isDouble=!1,this.init()}setState(t){const{min:e,max:i,from:s,to:n,horizontal:r}=t;this.state={min:e,max:i,from:s,to:n,horizontal:r},this.update()}changeIsDouble(t){this.isDouble=t}init(){this.createSubView()}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__tip"),this.slider.appendChild(this.subView)}update(){const{min:t,max:e,from:i,horizontal:s,to:r}=this.state;if("number"==typeof t&&"number"==typeof e&&"number"==typeof i&&"number"==typeof i){if(this.subView.textContent=this.isDouble?`${i} - ${r}`:i.toString(),s)return void(this.subView.style.top=`${(0,n.convertValueInPercent)(t,e,i)}%`);this.subView.style.left=`${(0,n.convertValueInPercent)(t,e,i)}%`}}}e.default=o},764:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(952),r=s(i(461));class o extends r.default{constructor(t){super(t),this.init()}setState(t){const{min:e,max:i,from:s,to:n,horizontal:r,range:o,progress:a}=t;this.state=Object.assign(Object.assign({},this.state),{min:e,max:i,from:s,to:n,horizontal:r,range:o,progress:a}),this.update()}createSubView(){this.subView=document.createElement("div"),this.subView.classList.add("jq-slider__track"),this.progress=document.createElement("div"),this.progress.classList.add("jq-slider__progress"),this.subView.appendChild(this.progress),this.slider.appendChild(this.subView)}init(){this.createSubView(),this.registerEvent("SubViewEvent"),this.bindEventListener()}bindEventListener(){this.clickHandler=this.clickHandler.bind(this),this.subView.addEventListener("click",this.clickHandler)}clickHandler(t){this.dispatchEvent("SubViewEvent",{target:"track",position:this.state.horizontal?t.clientY-this.slider.getBoundingClientRect().top:t.clientX-this.slider.getBoundingClientRect().left})}update(){const{min:t,max:e,from:i,to:s,horizontal:r,range:o,progress:a}=this.state;if(a){if("number"==typeof t&&"number"==typeof e&&"number"==typeof i&&"number"==typeof s){const a=(0,n.convertValueInPercent)(t,e,i),l=(0,n.convertValueInPercent)(t,e,s);if(r){if(o){const t=l-a;this.progress.style.height=`${t}%`,this.progress.style.marginTop=this.slider.clientHeight/100*a+"px"}else this.progress.style.height=`${a}%`;return}if(o){const t=l-a;this.progress.style.width=`${t}%`,this.progress.style.marginLeft=`${a}%`}else this.progress.style.width=`${a}%`}}else this.progress.remove()}}e.default=o},498:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(254)),r=s(i(49)),o=s(i(712)),a=s(i(841)),l=s(i(573)),h=s(i(764)),c=i(952),d=s(i(25));class u extends r.default{constructor(t){super(),this.nodeElem=t,this.components=[],this.state={},this.init()}setState(t){this.checkIsChangeSettings(t),this.state=Object.assign(Object.assign({},this.state),t),this.update(this.state),this.checkTips()}init(){this.createSlider(),this.registerEvent("ViewEvent")}createSlider(){this.slider=document.createElement("div"),this.slider.classList.add("jq-slider"),this.nodeElem.appendChild(this.slider)}createComponents(t){const{range:e,tip:i,scale:s,horizontal:r}=t;this.components.push(new n.default(this.slider)),this.components.push(new h.default(this.slider)),i&&this.components.push(new a.default(this.slider)),e&&(this.components.push(new o.default(this.slider)),i&&this.components.push(new l.default(this.slider))),s&&this.components.push(new d.default(this.slider)),r?this.slider.classList.add("jq-slider--horizontal"):this.slider.classList.remove("jq-slider--horizontal")}bindEventListener(){this.subViewEventHandler=this.subViewEventHandler.bind(this),this.components.forEach((t=>{t.events.SubViewEvent&&t.addEventListener("SubViewEvent",this.subViewEventHandler)}))}subViewEventHandler(t){const e=this.state.horizontal?this.slider.clientHeight:this.slider.clientWidth;if("handle"===t.target){const i=(0,c.convertPixelInPercent)(e,t.position);this.dispatchEvent("ViewEvent",{from:i})}if("secondHandle"===t.target){const i=(0,c.convertPixelInPercent)(e,t.position);this.dispatchEvent("ViewEvent",{to:i})}if("track"===t.target||"scale"===t.target){const i=this.getArrOfConcreteSubView(n.default),s=i[0].getPosition();if(this.state.range){const n=i[1].getPosition();return Math.abs(s-t.position)<n-t.position?void this.dispatchEvent("ViewEvent",{from:(0,c.convertPixelInPercent)(e,t.position)}):void this.dispatchEvent("ViewEvent",{to:(0,c.convertPixelInPercent)(e,t.position)})}this.dispatchEvent("ViewEvent",{from:(0,c.convertPixelInPercent)(e,t.position)})}}checkIsChangeSettings(t){const{range:e,tip:i,scale:s,horizontal:n,progress:r,scaleDestiny:o}=t;(e!==this.state.range||i!==this.state.tip||s!==this.state.scale||n!==this.state.horizontal||r!==this.state.progress||o!==this.state.scaleDestiny)&&(this.components=[],this.slider.innerHTML="",this.createComponents(t),this.bindEventListener())}checkTips(){const{tip:t,range:e,horizontal:i}=this.state;if(t&&e){const t=this.getArrOfConcreteSubView(a.default),e=i?t[1].subView.clientHeight:t[1].subView.offsetWidth;t[0].getPosition()>t[1].getPosition()-e?t.forEach((t=>{t.changeIsDouble(!0),t.setState(this.state)})):t.forEach((t=>{t.changeIsDouble(!1)}))}}update(t){this.components.forEach((e=>e.setState(t)))}getArrOfConcreteSubView(t){return this.components.filter((e=>{var i;return null!==(i=e instanceof t)&&void 0!==i?i:e}))}}e.default=u},461:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(49));class r extends n.default{constructor(t){super(),this.slider=t,this.state={}}getPosition(){return this.state.horizontal?this.subView.getBoundingClientRect().top:this.subView.getBoundingClientRect().left}}e.default=r},174:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(983);const n=s(i(731));!function(t){const e={init(e){if("object"==typeof e)return this.each((function(){t(this).data("jqSlider")||(t(this).data().jqSlider=new n.default(this,e))}))},update(e){this.each((function(){t(this).data("jqSlider").model.setState(e)}))},onChange(e){this.each((function(){t(this).data("jqSlider").addEventListener("onChange",(t=>e(t)))}))}};t.fn.jqSlider=function(...t){const i=0===t.length||"object"==typeof t[0],s=t.length>=2&&"update"===t[0]&&"object"==typeof t[1],n=t.length>=2&&"onChange"===t[0]&&"function"==typeof t[1];if(i){const i=t[0]?t[0]:{};return e.init.call(this,i)}if(s){const i=t[1];return e.update.call(this,i)}if(n){const i=t[1];return e.onChange.call(this,i)}}}(jQuery)},952:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.convertPercentInValue=e.convertPixelInPercent=e.convertValueInPercent=void 0,e.convertValueInPercent=function(t,e,i){return 100/(e-t)*(i-t)},e.convertPixelInPercent=function(t,e){return 100/t*e},e.convertPercentInValue=function(t,e,i){return(e-t)/100*i+t}}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,i),r.exports}i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(174)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,